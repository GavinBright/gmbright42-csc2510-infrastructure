---
# tasks file for mysql
- name: Check for Python3 and pip in Debian Linux
  apt:
    name:
      - python3
      - python3-pip
    state: present
  when: ansible_facts['os_family'] == "Debian"
# TODO: this task should only run if the OS is Debian based

- name: Install PyMySQL
  pip:
    name: pymysql
    executable: pip3

- name: Install MySQL server
  apt:
    name: mysql-server
    state: present

- name: Start MySQL service
  service:
    name: mysql
    state: started
    enabled: true
#I am very unsure how well the rest of this section works.
- name: Copy update script to the server
  ansible.builtin.copy:
    src: '{{ password }}'
    dest: /tmp/newpassword.sh
    mode: '0755'

- name: Execute the script
  ansible.builtin.shell: /tmp/newpassword.sh "{{ mysql_root_password }}"
  register: script_output
  
- name: Output result from script
  ansible.builtin.debug:
    msg: "{{ script_output.stdout_lines }}"

- name: Clean up - remove the script from the remote server
  ansible.builtin.file:
    path: /tmp/newpassword.sh
    state: absent

- name: Create MySQL database
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    name: "{{ mysql_database }}"
    state: present

- name: Create MySQL user
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    state: present

- name: Copy SQL file to remote host
# TODO - this should only be run if mysql_import_data is true
  ansible.builtin.copy:
    src: "{{ mysql_sql_file }}"
    dest: ~"{{ mysql_sql_file }}"
  when: mysql_import_data

- name: Import SQL data
  community.mysql.mysql_db:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    name: "{{ mysql_database }}"
    state: import
    target: ~"{{ mysql_sql_file }}"
  when: mysql_import_data

# Broke the bottom task below into two seperate tasks to play it safe.
- name: Update MySQL bind-address to allow external connections
  ansible.builtin.lineinfile:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf
    regexp: '^{{ item.regexp }}'
    line: '{{ item.line }}'
    state: present
  loop:
    - { regexp: '^bind-address\s*=\s*127\.0\.0\.1', line: 'bind-address = 0.0.0.0' }
    - { regexp: '^mysqlx-bind-address\s*=\s*127\.0\.0\.1', line: 'mysqlx-bind-address = 0.0.0.0' }
  notify: Restart MySQL Server
